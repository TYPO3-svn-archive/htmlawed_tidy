 # tidy.cfg
 # ========

 # HTML Tidy configuration file for Gerolf Markup Shredder.
 # HTML Tidy was originally written by Dave Raggett.
 # Documentation: http://www.w3.org/People/Raggett/tidy
 # CFG Reference: http://tidy.sourceforge.net/docs/quickref.html (quoted below)
 # Any option name must start at the very beginning of the line to become valid
     
 # ============================================================================

 # HTML, XHTML, XML Options:

 # add-xml-decl: ..............................................................
  
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should add the XML declaration when 
 #   outputting XML or XHTML. Note that if the input already includes an
 #    <?xml ... ?> declaration then this option will be ignored.

 # add-xml-decl: no

 # add-xml-pi: ................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option is the same as the add-xml-decl option.

 # add-xml-pi: no
 
 # add-xml-space: .............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should add xml:space="preserve" to elements 
 #   such as <PRE>, <STYLE> and <SCRIPT> when generating XML. This is needed if 
 #   the whitespace in such elements is to be parsed appropriately without 
 #   having access to the DTD. 

 # add-xml-space: no

 # alt-text: ..................................................................
 
 #   Type: String
 #   Default: -none-
 #   This option specifies the default "alt=" text Tidy uses for <IMG> 
 #   attributes. This feature is dangerous as it suppresses further 
 #   accessibility warnings. You are responsible for making your documents 
 #   accessible to people who can not see the images!
 
 # alt-text: ""

 # assume-xml-procins: ........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should change the parsing of processing 
 #   instructions to require ?> as the terminator rather than >. This option is 
 #   automatically set if the input is in XML. 

 # assume-xml-procins: no

 # bare: ......................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should strip Microsoft specific HTML from 
 #   Word 2000 documents, and output spaces rather than non-breaking spaces 
 #   where they exist in the input.

 # bare: yes

 # break-before-br: ...........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output a line break before each <BR> 
 #   element. 

 # break-before-br: no

 # clean: .....................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should strip out surplus presentational tags 
 #   and attributes replacing them by style rules and structural markup as 
 #   appropriate. It works well on the HTML saved by Microsoft Office products.

 # clean: no

 # doctype: ...................................................................
 
 #   Type: DocType
 #   Default: auto
 #   Example: auto, omit, strict, loose, transitional, user specified fpi 
 #   (string)
 #   This option specifies the DOCTYPE declaration generated by Tidy. If set to 
 #   "omit" the output won't contain a DOCTYPE declaration. If set to "auto" 
 #   (the default) Tidy will use an educated guess based upon the contents of 
 #   the document. If set to "strict", Tidy will set the DOCTYPE to the strict 
 #   DTD. If set to "loose", the DOCTYPE is set to the loose (transitional) 
 #   DTD. Alternatively, you can supply a string for the formal public 
 #   identifier (FPI), for example: "-//ACME//DTD HTML 3.14159//EN".
 #   If you specify the FPI for an XHTML document, Tidy will set the system 
 #   identifier to the empty string. Tidy leaves the DOCTYPE for generic XML 
 #   documents unchanged. "--doctype omit" implies "--numeric-entities yes".

 # doctype: auto
 
 # drop-empty-paras: ..........................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should discard empty paragraphs. If set to 
 #   no, empty paragraphs are replaced by a pair of <BR> elements as HTML4 
 #   precludes empty paragraphs. 

 # drop-empty-paras: yes

 # drop-font-tags: ............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should discard <FONT> and <CENTER> tags 
 #   rather than creating the corresponding style rules, but only if the clean 
 #   option is also set to yes. 

 # drop-font-tags: no

 # drop-proprietary-attributes: ...............................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should strip out proprietary attributes, 
 #   such as MS data binding attributes.

 # drop-proprietary-attributes: no
 
 # enclose-block-text: ........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should insert a <P> element to enclose any 
 #   text it finds in any element that allows mixed content for HTML 
 #   transitional but not HTML strict. 

 # enclose-block-text: no
 
 # enclose-text: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should enclose any text it finds in the body 
 #   element within a <P> element. This is useful when you want to take 
 #   existing HTML and use it with a style sheet.

 # enclose-text: no

 # escape-cdata: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should convert <![CDATA[]]> sections to 
 #   normal text.

 # escape-cdata: no

 # fix-bad-comments: ..........................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should replace unexpected hyphens with "=" 
 #   characters when it comes across adjacent hyphens. The default is yes. This 
 #   option is provided for users of Cold Fusion which uses the comment syntax: 
 #   <!--- --->

 # fix-bad-comments: yes

 # fix-uri: ...................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should check attribute values that carry 
 #   URIsfor illegal characters and if such are found, escape them as HTML 4 
 #   recommends. 

 # fix-uri: yes

 # hide-comments: .............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should print out comments. 

 # hide-comments: no

 # hide-endtags: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should omit optional end-tags when 
 #   generating the pretty printed markup. This option is ignored if you are 
 #   outputting to XML.

 # hide-endtags: no

 # indent-cdata: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should indent <![CDATA[]]> sections.

 # indent-cdata: no

 # input-xml: .................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should use the XML parser rather than the 
 #   error correcting HTML parser.

 # input-xml: no
 
 # join-classes: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0join-styles
 #   repeated-attributes
 #   This option specifies if Tidy should combine class names to generate a 
 #   single new class name, if multiple class assignments are detected on an 
 #   element.

 # join-classes: no

 # join-styles: ...............................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0join-classes
 #   repeated-attributes
 #   This option specifies if Tidy should combine styles to generate a single 
 #   new style, if multiple style values are detected on an element.

 # join-styles: yes

 # logical-emphasis: ..........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should replace any occurrence of <I> by <EM> 
 #   and any occurrence of <B> by <STRONG>. In both cases, the attributes are 
 #   preserved unchanged. This option can be set independently of the clean and 
 #   drop-font-tags options. 

 # logical-emphasis: no
 
 # lower-literals: ............................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should convert the value of an attribute 
 #   that takes a list of predefined values to lower case. This is required for 
 #   XHTML documents. 

 # lower-literals: yes

 # ncr: .......................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should allow numeric character references.

 # ncr: yes

 # new-blocklevel-tags: .......................................................
 
 #   Type: Tag names
 #   Default: -none-
 #   Example: tagX, tagY, ...
 #   This option specifies new block-level tags. This option takes a space or 
 #   comma separated list of tag names. Unless you declare new tags, Tidy will 
 #   refuse to generate a tidied file if the input includes previously unknown 
 #   tags. Note you can't change the content model for elements such as 
 #   <TABLE>, <UL>, <OL> and <DL>.
 
 # new-empty-tags: ............................................................
 
 #   Type: Tag names
 #   Default: -none-
 #   Example: tagX, tagY, ...new-blocklevel-tags
 #   new-inline-tags
 #   This option specifies new empty inline tags. This option takes a space or 
 #   comma separated list of tag names. Unless you declare new tags, Tidy will 
 #   refuse to generate a tidied file if the input includes previously unknown 
 #   tags. Remember to also declare empty tags as either inline or blocklevel.
 
 # new-empty-tags: pageno

 # new-inline-tags: ...........................................................
 
 #   Type: Tag names
 #   Default: -none-
 #   Example: tagX, tagY, ...
 #   This option specifies new non-empty inline tags. This option takes a space 
 #   or comma separated list of tag names. Unless you declare new tags, Tidy 
 #   will refuse to generate a tidied file if the input includes previously 
 #   unknown tags. 

 # new-pre-tags: ..............................................................
 
 #   Type: Tag names
 #   Default: -none-
 #   Example: tagX, tagY, ...
 #   This option specifies new tags that are to be processed in exactly the 
 #   same way as HTML's <PRE> element. This option takes a space or comma 
 #   separated list of tag names. Unless you declare new tags, Tidy will refuse 
 #   to generate a tidied file if the input includes previously unknown tags. 
 #   Note you can not as yet add new CDATA elements (similar to <SCRIPT>). 
 
 # numeric-entities: ..........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output entities other than the 
 #   built-in HTML entities (&amp;, &lt;, &gt; and &quot;) in the numeric 
 #   rather than the named entity form. 

 # numeric-entities: no

 # output-xhtml: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should generate pretty printed output, 
 #   writing it as extensible HTML. This option causes Tidy to set the DOCTYPE 
 #   and default namespace as appropriate to XHTML. If a DOCTYPE or namespace 
 #   is given they will checked for consistency with the content of the 
 #   document. In the case of an inconsistency, the corrected values will 
 #   appear in the output. For XHTML, entities can be written as named or 
 #   numeric entities according to the setting of the "numeric-entities" 
 #   option. The original case of tags and attributes will be preserved, 
 #   regardless of other options.

 # output-xhtml: no

 # output-xml: ................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should pretty print output, writing it as 
 #   well-formed XML. Any entities not defined in XML 1.0 will be written as 
 #   numeric entities to allow them to be parsed by a XML parser. The original 
 #   case of tags and attributes will be preserved, regardless of other 
 #   options.

 # output-xml: no

 # quote-ampersand: ...........................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output unadorned & characters as 
 #   &amp;. 

 # quote-ampersand: yes

 # quote-marks: ...............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output " characters as &quot; as is 
 #   preferred by some editing environments. The apostrophe character ' is 
 #   written out as &#39; since many web browsers don't yet support &apos;. 

 # quote-marks: no

 # quote-nbsp: ................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output non-breaking space characters 
 #   as entities, rather than as the Unicode character value 160 (decimal). 

 # quote-nbsp: yes

 # repeated-attributes: .......................................................
 
 #   Type: -
 #   Default: keep-last
 #   Example: keep-first, keep-lastjoin-classes
 #   join-styles
 #   This option specifies if Tidy should keep the first or last attribute, if 
 #   an attribute is repeated, e.g. has two align attributes.

 # repeated-attributes: keep-last
 
 # replace-color: .............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should replace numeric values in color 
 #   attributes by HTML/XHTML color names where defined, e.g. replace "#ffffff" 
 #   with "white".

 # replace-color: no

 # show-body-only: ............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should print only the contents of the body 
 #   tag as an HTML fragment. Useful for incorporating existing whole pages as 
 #   a portion of another page.

 # show-body-only: no

 # slide-style: ...............................................................
 
 #   Type: Name
 #   Default: -none-
 #   split
 #   Currently not used.

 # split: .....................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should create a sequence of slides from the 
 #   input, splitting the markup prior to each successive <H2>. The slides are 
 #   written to "slide001.html", "slide002.html" etc. 

 # split: no

 # uppercase-attributes: ......................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output attribute names in upper case. 
 #   The default is no, which results in lower case attribute names, except for 
 #   XML input, where the original case is preserved. 

 # uppercase-attributes: no

 # uppercase-tags: ............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output tag names in upper case. The 
 #   default is no, which results in lower case tag names, except for XML 
 #   input, where the original case is preserved. 

 # uppercase-tags: no

 # word-2000: .................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should go to great pains to strip out all 
 #   the surplus stuff Microsoft Word 2000 inserts when you save Word documents 
 #   as "Web pages". Doesn't handle embedded images or VML.

 # word-2000: yes

 # Diagnostics Options: =======================================================
 
 # gnu-emacs: .................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should change the format for reporting 
 #   errors and warnings to a format that is more easily parsed by GNU Emacs. 

 # gnu-emacs: no

 # quiet: .....................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should output the summary of the numbers of 
 #   errors and warnings, or the welcome or informational messages.

 # quiet: no
 
 # show-errors: ...............................................................
 
 #   Type: Integer
 #   Default: 6
 #   Example: 0, 1, 2, ...
 #   This option specifies the number Tidy uses to determine if further errors 
 #   should be shown. If set to 0, then no errors are shown.

 # show-errors: 6

 # show-warnings: .............................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should suppress warnings. This can be useful 
 #   when a few errors are hidden in a flurry of warnings. 

 # show-warnings: yes

 # Pretty Print Options: ====================================================== 

 # indent:
 
 #   Type: AutoBool
 #   Default: no
 #   Example: auto, y/n, yes/no, t/f, true/false, 1/0indent-spaces
 #   This option specifies if Tidy should indent block-level tags. If set to 
 #   "auto", this option causes Tidy to decide whether or not to indent the 
 #   content of tags such as TITLE, H1-H6, LI, TD, TD, or P depending on 
 #   whether or not the content includes a block-level element. You are advised 
 #   to avoid setting indent to yes as this can expose layout bugs in some 
 #   browsers. 

indent: yes

 # indent-attributes: .........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should begin each attribute on a new line. 

 # indent-attributes: no

 # indent-spaces: .............................................................
 
 #   Type: Integer
 #   Default: 2
 #   Example: 0, 1, 2, ...indent
 #   This option specifies the number of spaces Tidy uses to indent content, 
 #   when indentation is enabled.

 # indent-spaces: 2

 # literal-attributes: ........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should ensure that whitespace characters 
 #   within attribute values are passed through unchanged.

 # literal-attributes: no

 # markup: ....................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should generate a pretty printed version of 
 #   the markup. Note that Tidy won't generate a pretty printed version if it 
 #   finds significant errors (see force-output).

 # markup: no
 
 # tab-size: ..................................................................
 
 #   Type: Integer
 #   Default: 4
 #   Example: 0, 1, 2, ...
 #   This option specifies the number of columns that Tidy uses between 
 #   successive tab stops. It is used to map tabs to spaces when reading the 
 #   input. Tidy never outputs tabs. 

tab-size: 2

 # wrap: ......................................................................
 
 #   Type: Integer
 #   Default: 68
 #   Example: 0 (no wrapping), 1, 2, ...
 #   This option specifies the right margin Tidy uses for line wrapping. Tidy 
 #   tries to wrap lines so that they do not exceed this length. Set wrap to 
 #   zero if you want to disable line wrapping. 

wrap: 78

 # wrap-asp: ..................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should line wrap text contained within ASP 
 #   pseudo elements, which look like: <% ... %>. 

 # wrap-asp: yes

 # wrap-attributes: ...........................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0wrap-script-literals
 #   This option specifies if Tidy should line wrap attribute values, for 
 #   easier editing. This option can be set independently of 
 #   wrap-script-literals.

 # wrap-attributes: yes
 
 # wrap-jste: .................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should line wrap text contained within JSTE 
 #   pseudo elements, which look like: <#   ... #>. 

 # wrap-jste: yes

 # wrap-php: ..................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should line wrap text contained within PHP 
 #   pseudo elements, which look like: <?php ... ?>.

 # wrap-php: yes

 # wrap-script-literals: ......................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0wrap-attributes
 #   This option specifies if Tidy should line wrap string literals that appear 
 #   in script attributes. Tidy wraps long script string literals by inserting 
 #   a backslash character before the line break.

 # wrap-script-literals: no

 # wrap-sections: .............................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should line wrap text contained within <![ 
 #   ... ]> section tags.

 # wrap-sections: yes

 # Character Encoding Options: ================================================ 

 # ascii-chars:
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   Can be used to modify behavior of -c (--clean yes) option. Defaults to 
 #   "yes" when using -c. Set to "no" to prevent converting &ndash;, &rdquo;, 
 #   and other named character entities to their ascii equivalents.

 # ascii-chars: no

 # char-encoding: .............................................................
 
 #   Type: Encoding
 #   Default: ascii
 #   Example: ascii, latin1, raw, utf8, iso2022, mac, win1252, utf16, utf16le, 
 #   utf16be, big5, shiftjis
 #   This option specifies the character encoding Tidy uses for both the input 
 #   and output. For ascii, Tidy will accept Latin-1 (ISO-8859-1) character 
 #   values, but will use entities for all characters whose value > 127. For 
 #   raw, Tidy will output values above 127 without translating them into 
 #   entities. For latin1, characters above 255 will be written as entities. 
 #   For utf8, Tidy assumes that both input and output is encoded as UTF-8. You 
 #   can use iso2022 for files encoded using the ISO-2022 family of encodings 
 #   e.g. ISO-2022-JP. For mac and win1252, Tidy will accept vendor specific 
 #   character values, but will use entities for all characters whose value > 
 #   127. 

 # char-encoding: win1252

 # input-encoding: ............................................................
 
 #   Type: Encoding
 #   Default: latin1
 #   Example: ascii, latin1, raw, utf8, iso2022, mac, win1252, utf16, utf16le, 
 #   utf16be, big5, shiftjis
 #   This option specifies the character encoding Tidy uses for the input. See 
 #   char-encoding for more info.

 # input-encoding: win1252

 # language: ..................................................................
 
 #   Type: Language
 #   Default: -none-
 #   Example: en
 #   Currently not used, but this option specifies the language Tidy uses.

 # output-bom: ................................................................
 
 #   Type: AutoBool
 #   Default: auto
 #   Example: auto, y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should write a Unicode Byte Order Mark 
 #   character (BOM; also known as Zero Width No-Break Space; has value of 
 #   U+FEFF) to the beginning of the output; only for UTF-8 and UTF-16 output 
 #   encodings. If set to "auto", this option causes Tidy to write a BOM to the 
 #   output only if a BOM was present at the beginning of the input. A BOM is 
 #   always written for XML/XHTML output using UTF-16 output encodings.

 # output-bom: auto

 # output-encoding: ...........................................................
 
 #   Type: Encoding
 #   Default: ascii
 #   Example: ascii, latin1, raw, utf8, iso2022, mac, win1252, utf16, utf16le, 
 #   utf16be, big5, shiftjis
 #   This option specifies the character encoding Tidy uses for the output. See 
 #   char-encoding for more info. May only be different from input-encoding for 
 #   Latin encodings (ascii, latin1, mac, win1252).

 # output-encoding: win1252

 # newline: ...................................................................
 
 #   Type: Enum
 #   Default: Platform Dependent
 #   Example: LF, CRLF, CR
 #   The default is appropriate to the current platform: CRLF on Windows and 
 #   OS/2, CR on the Mac and LF everywhere else (Unix and Linux).

 # newline: CRLF

 # Miscellaneous Options: ===================================================== 

 # fix-backslash:
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should replace backslash characters "\" in 
 #   URLs by forward slashes "/". 

 # fix-backslash: yes

 # output-file: ...............................................................
 
 #   Type: String
 #   Default: -none-
 #   error-file
 #   This option specifies the output file Tidy uses for markup. Normally 
 #   markup is written to "stdout".

 # error-file: ................................................................
 
 #   Type: String
 #   Default: -none-
 #   output-file
 #   This option specifies the error file Tidy uses for errors and warnings. 
 #   Normally errors and warnings are output to "stderr".

 # force-output: ..............................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should produce output even if errors are 
 #   encountered. Use this option with care - if Tidy reports an error, this 
 #   means Tidy was not able to, or is not sure how to, fix the error, so the 
 #   resulting output may not reflect your intention. 

 # force-output: no

 # keep-time: .................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should alter the last modified time for 
 #   files it writes back to. The default is no, which allows you to tidy files 
 #   without affecting which ones will be uploaded to a Web server when using a 
 #   tool such as 'SiteCopy'. Note that this feature may not work on some 
 #   platforms. 

 # keep-time: yes

 # write-back: ................................................................
 
 #   Type: Boolean
 #   Default: no
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should write back the tidied markup to the 
 #   same file it read from. You are advised to keep copies of important files 
 #   before tidying them, as on rare occasions the result may not be what you 
 #   expect. 

 # write-back: no

 # tidy-mark: .................................................................
 
 #   Type: Boolean
 #   Default: yes
 #   Example: y/n, yes/no, t/f, true/false, 1/0
 #   This option specifies if Tidy should add a meta element to the document 
 #   head to indicate that the document has been tidied. Tidy won't add a meta 
 #   element if one is already present.

tidy-mark: no